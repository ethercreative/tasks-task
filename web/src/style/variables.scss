// Colours
// =========================================================================

$primary-light: #B59BFF;
$primary: #6F57B4;

$text-color: #fff;
$text-muted: #7D7D7D;

$background-color: #000;
$border-color: #373737;

// Fonts
// =========================================================================

$font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji;

// Animations
// =========================================================================

$ease-in-out-back: cubic-bezier(.51,2.71,.52,.56);

// Functions
// =========================================================================

/**
 * Round the given number to a set number of decimals
 * @see https://stackoverflow.com/a/29901280/550109
 */
@function decimal-round ($number, $digits: 0, $mode: round) {
	$n: 1;

	// $number must be a number
	@if type-of($number) != number {
		@warn '#{ $number } is not a number.';
		@return $number;
	}

	// $digits must be a unitless number
	@if type-of($digits) != number {
		@warn '#{ $digits } is not a number.';
		@return $number;
	} @else if not unitless($digits) {
		@warn '#{ $digits } has a unit.';
		@return $number;
	}

	@for $i from 1 through $digits {
		$n: $n * 10;
	}

	@if $mode == round {
		@return round($number * $n) / $n;
	} @else if $mode == ceil {
		@return ceil($number * $n) / $n;
	} @else if $mode == floor {
		@return floor($number * $n) / $n;
	} @else {
		@warn '#{ $mode } is undefined keyword.';
		@return $number;
	}
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}

/**
 * Convert the given PX size to REMs
 */
@function size ($targetSize, $baseSize: 16) {
	@return #{decimal-round(strip-unit($targetSize) / $baseSize, 3)}rem;
}

// Sizes
// =========================================================================

$spacer: 40px;

// Media Queries (Misc)
// =========================================================================

$still: '(prefers-reduced-motion: reduce)';

// Mixins
// =========================================================================

/**
 * $maxFontSize - The max font size (also the fallback)
 */
@mixin responsiveSize($minFontSize, $maxFontSize, $minScreenWidth: 400, $maxScreenWidth: 1260) {
	$fontDiff: $maxFontSize - $minFontSize;
	$screenDiff: $maxScreenWidth - $minScreenWidth;
	font-size: #{$maxFontSize}px;
	font-size: calc(#{$minFontSize}px + (#{$fontDiff}) * (100vw - #{$minScreenWidth}px) / (#{$screenDiff}));

	@media (min-width: #{$maxScreenWidth}px) {
		font-size: #{$maxFontSize}px;
	}

	@media (max-width: #{$minScreenWidth}px) {
		font-size: #{$minFontSize}px;
	}
}
